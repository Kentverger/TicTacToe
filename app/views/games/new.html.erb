<div class="game">
  <h1 class="game__title">Tic Tac Toe</h1>
  <div class="game__board">
    <div data-state="available" data-coordinate-x="1" data-coordinate-y="3" class="board__button">
    </div>
    <div data-state="available" data-coordinate-x="2" data-coordinate-y="3" class="board__button">
    </div>
    <div data-state="available" data-coordinate-x="3" data-coordinate-y="3" class="board__button">
    </div>
    <div data-state="available" data-coordinate-x="1" data-coordinate-y="2" class="board__button">
    </div>
    <div data-state="available" data-coordinate-x="2" data-coordinate-y="2" class="board__button">
    </div>
    <div data-state="available" data-coordinate-x="3" data-coordinate-y="2" class="board__button">
    </div>
    <div data-state="available" data-coordinate-x="1" data-coordinate-y="1" class="board__button">
    </div>
    <div data-state="available" data-coordinate-x="2" data-coordinate-y="1" class="board__button">
    </div>
    <div data-state="available" data-coordinate-x="3" data-coordinate-y="1" class="board__button">
    </div>
  </div>
  <button class="game__new-button">NEW GAME</button>
</div>
<script type="text/javascript">
  (function() {
    /**
    * Object for the server side communication.
    *
    * @constructor
    */
    function Server() {
      this.endpoints = {
        setTurn: {
          url: '<%= turns_path(format: :json) %>',
          method: 'post'
        },
        createGame: {
          url: '<%= games_path(format: :json) %>',
          method: 'post',
        }
      };

      this.headers = {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelectorAll('meta[name="csrf-token"]')[0].getAttribute('content')
      }
    }

    /**
    * Create a turn in the backend, it response if a player win the game.
    *
    * @param piece HTML element for the piece selected by the player.
    * @param gameId The identifier of the game.
    */
    Server.prototype.createTurn = function(piece, gameId){
      const data = {
        turn: {
          game_id: gameId,
          x: piece.dataset.coordinateX,
          y: piece.dataset.coordinateY,
          badge: piece.dataset.state,
        }
      }

      fetch(this.endpoints.setTurn.url, {
        method: this.endpoints.setTurn.method,
        body: JSON.stringify(data),
        headers: this.headers,
      }).then(function (response) {
        return response.json();
      }).then(function (data) {
        if(data.winner !== false){
          alert(data.winner);
        }
      });
    }

    /**
    * Create a game in the backend.
    */
    Server.prototype.createGame = function(){
      return fetch(this.endpoints.createGame.url, {
        method: this.endpoints.createGame.method,
        body: JSON.stringify(this.endpoints.createGame.data),
        headers: this.headers,
      }).then(function (response) {
        return response.json();
      }).then(function (data) {
        return data.id;
      });
    }

    /**
    * Object to handle all game interaction with players and server backend.
    *
    * @constructor
    */
    function Game() {
      this.playerTurn = false;
      this.server = new Server();
      this.id = 0;

      this.server.createGame().then(
        function(data){
          this.id = data;
        }.bind(this)
      );
    }

    /**
    * Change the piece status and badge icon depending of the player turn.
    * It also create the turn on the server.
    *
    * @param piece HTML element for the piece selected by the player.
    */
    Game.prototype.updatePiece = function (piece) {
      const currentState = piece.dataset.state;

      if (currentState === 'available') {
        if (this.playerTurn){
          piece.dataset.state = 'Cross';
          piece.innerHTML = '<ion-icon name="close-outline"></ion-icon>'
          this.server.createTurn(piece, this.id);
        } else {
          piece.dataset.state = 'Circle';
          piece.innerHTML = '<ion-icon name="radio-button-off-outline"></ion-icon>'
          this.server.createTurn(piece, this.id);
        }
      }
    }

    /**
    * Function for the on slot board click event, when the user click one slot on the borad this function will be triggered.
    * It will change the players turn and it will update the piece status.
    *
    * @param piece HTML element for the piece selected by the player.
    */
    Game.prototype.turn = function (piece) {
      this.updatePiece(piece);
      this.playerTurn = !this.playerTurn;
    }

    /**
    * Function for the on new game button click event, when the user click the button this function will be triggerd.
    * It clean all the states of the borads slots and create new game in the server.
    *
    * @param pieces HTML elements for the pieces on the borad.
    */
    Game.prototype.restartGame = function (pieces){
      this.server.createGame().then(
        function(data){
          this.id = data;
        }.bind(this)
      );

      pieces.forEach(function (piece) {
        piece.innerHTML = '';
        piece.dataset.state = 'available';
      });
    }

    const game = new Game();

    const pieces = document.querySelectorAll(".board__button");
    pieces.forEach(function (piece) {
      piece.addEventListener('click', function(event){
        game.turn(event.target);
      });
    });

    const newGame = document.querySelectorAll(".game__new-button")[0];
    newGame.addEventListener('click', function(event) {
      game.restartGame(pieces);
    });
  })();
</script>
